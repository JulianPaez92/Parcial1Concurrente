import threading
import random
import logging
import time

logging.basicConfig(format='%(asctime)s.%(msecs)03d [%(threadName)s] - %(message)s', datefmt='%H:%M:%S', level=logging.INFO)

lock = threading.Lock()
datos = 0
leido = False
cantGeneradores = 0

class Procesador(threading.Thread):
    def __init__(self):
        super().__init__()


    def run(self):
        global datos
        global leido
        while True:
            time.sleep(0.5)
            lock.acquire()
            try:
                logging.info(f'Se proceso el dato : {datos}')
                if leido == False:
                    leido = True
            finally:
                lock.release()
                time.sleep(random.randint(1,2))



class Generador(threading.Thread):
    def __init__(self,nombre):
        super().__init__()
        self.name = nombre

    def run(self):
        global datos
        global cantGeneradores
        while True:
            time.sleep(1)
            lock.acquire()
            try:
                cantGeneradores += 1
                if (cantGeneradores <= 2):
                    datos = random.randint(0, 100)
                    logging.info(f'Se generÃ³ un nuevo dato = {datos}')
                    cantGeneradores -= 1
                else:
                    cantGeneradores -= 1

            finally:
                lock.release()
                time.sleep(random.randint(1,3))



procesador = Procesador()

for i in range(4):
    Generador(i).start()

procesador.start()
